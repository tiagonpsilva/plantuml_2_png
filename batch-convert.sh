#!/bin/bash

# batch-convert.sh - Script para converter m√∫ltiplos arquivos PlantUML de uma vez
# Autor: Tiago N. Pinto Silva
# Vers√£o: 1.1.0

# ===========================
# Configura√ß√µes
# ===========================
# Pasta onde os arquivos ser√£o salvos (padr√£o: ./output)
OUTPUT_DIR="${1:-./output}"
# Pasta com os arquivos de origem (padr√£o: ./examples)
INPUT_DIR="${2:-./examples}"
# Flag de verbosidade
VERBOSE=0
# Formato de sa√≠da (padr√£o: png)
OUTPUT_FORMAT="png"
# Caminho personalizado para o JAR do PlantUML (padr√£o: usar o do script principal)
PLANTUML_JAR_PATH=""
# Extens√µes de arquivo a processar
FILE_EXTENSIONS=("wsd" "puml" "plantuml" "iuml" "pu")

# ===========================
# Fun√ß√µes
# ===========================

# Fun√ß√£o para exibir mensagem de ajuda
show_help() {
  echo "Uso: $(basename $0) [OP√á√ïES] [DIRET√ìRIO_SA√çDA] [DIRET√ìRIO_ENTRADA]"
  echo
  echo "Converte todos os arquivos de diagrama PlantUML do diret√≥rio de entrada para o formato especificado"
  echo
  echo "Par√¢metros posicionais (opcionais):"
  echo "  DIRET√ìRIO_SA√çDA    Diret√≥rio onde os arquivos ser√£o salvos (padr√£o: ./output)"
  echo "  DIRET√ìRIO_ENTRADA  Diret√≥rio de onde os arquivos ser√£o lidos (padr√£o: ./examples)"
  echo
  echo "Op√ß√µes:"
  echo "  -h, --help              Exibe esta mensagem de ajuda"
  echo "  -v, --verbose           Exibe informa√ß√µes detalhadas durante o processamento"
  echo "  -f, --format FORMAT     Define o formato de sa√≠da (png, svg, eps, pdf) [padr√£o: png]"
  echo "  -j, --jar-path PATH     Define um caminho personalizado para o arquivo PlantUML JAR"
  echo "  -e, --extension EXT     Especifica extens√£o adicional para processar (pode ser usado m√∫ltiplas vezes)"
  echo "                          Extens√µes padr√£o: ${FILE_EXTENSIONS[*]}"
  echo
  echo "Exemplos:"
  echo "  $(basename $0)                        # Usa ./examples como entrada e ./output como sa√≠da"
  echo "  $(basename $0) ./diagramas            # Usa ./examples como entrada e ./diagramas como sa√≠da"
  echo "  $(basename $0) ./diagramas ./src      # Usa ./src como entrada e ./diagramas como sa√≠da"
  echo "  $(basename $0) -f svg ./diagramas     # Gera arquivos SVG em vez de PNG"
  echo "  $(basename $0) --verbose -f pdf       # Modo verbose com sa√≠da em PDF"
  echo
  exit 0
}

# ===========================
# Processamento de argumentos
# ===========================

# Array para armazenar argumentos n√£o processados
NON_OPTION_ARGS=()

# Processa todos os argumentos da linha de comando
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_help
      ;;
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -f|--format)
      if [[ -n "$2" && "$2" != -* ]]; then
        case "$2" in
          png|svg|eps|pdf)
            OUTPUT_FORMAT="$2"
            shift 2
            ;;
          *)
            echo "‚ùå Erro: Formato de sa√≠da inv√°lido: $2. Formatos suportados: png, svg, eps, pdf"
            exit 1
            ;;
        esac
      else
        echo "‚ùå Erro: Argumento ausente para a op√ß√£o $1"
        exit 1
      fi
      ;;
    -j|--jar-path)
      if [[ -n "$2" && "$2" != -* ]]; then
        PLANTUML_JAR_PATH="$2"
        shift 2
      else
        echo "‚ùå Erro: Argumento ausente para a op√ß√£o $1"
        exit 1
      fi
      ;;
    -e|--extension)
      if [[ -n "$2" && "$2" != -* ]]; then
        FILE_EXTENSIONS+=("$2")
        shift 2
      else
        echo "‚ùå Erro: Argumento ausente para a op√ß√£o $1"
        exit 1
      fi
      ;;
    *)
      NON_OPTION_ARGS+=("$1")
      shift
      ;;
  esac
done

# Restaura os argumentos posicionais se fornecidos
if [[ ${#NON_OPTION_ARGS[@]} -ge 1 ]]; then
  OUTPUT_DIR="${NON_OPTION_ARGS[0]}"
fi
if [[ ${#NON_OPTION_ARGS[@]} -ge 2 ]]; then
  INPUT_DIR="${NON_OPTION_ARGS[1]}"
fi

# Verifica se o diret√≥rio de entrada existe
if [ ! -d "$INPUT_DIR" ]; then
  echo "‚ùå Erro: O diret√≥rio de entrada '$INPUT_DIR' n√£o existe."
  exit 1
fi

# Cria o diret√≥rio de sa√≠da se n√£o existir
mkdir -p "$OUTPUT_DIR"

# Caminho completo do script plantuml2png.sh
SCRIPT_DIR=$(dirname "$(realpath "$0")")
PLANTUML_SCRIPT="$SCRIPT_DIR/plantuml2png.sh"

# Verifica se o script plantuml2png.sh existe
if [ ! -f "$PLANTUML_SCRIPT" ]; then
  echo "‚ùå Erro: O script plantuml2png.sh n√£o foi encontrado em '$SCRIPT_DIR'."
  exit 1
fi

# Adiciona permiss√£o de execu√ß√£o ao script se necess√°rio
chmod +x "$PLANTUML_SCRIPT"

# Constr√≥i o padr√£o de extens√µes para usar com find
EXTENSION_PATTERN=$(IFS="|"; echo "${FILE_EXTENSIONS[*]}")

# Encontra todos os arquivos de diagrama no diret√≥rio de entrada
DIAGRAM_FILES=$(find "$INPUT_DIR" -type f -regextype posix-extended -regex ".*\.($EXTENSION_PATTERN)$")

# Verifica se encontrou arquivos
if [ -z "$DIAGRAM_FILES" ]; then
  echo "‚ö†Ô∏è Aviso: Nenhum arquivo de diagrama encontrado no diret√≥rio '$INPUT_DIR'."
  echo "   Extens√µes pesquisadas: ${FILE_EXTENSIONS[*]}"
  exit 0
fi

# Contador de arquivos
TOTAL_FILES=$(echo "$DIAGRAM_FILES" | wc -l)
CURRENT=0
SUCCESS=0
FAILED=0

echo "üìã Encontrados $TOTAL_FILES arquivos para convers√£o"
echo "üìÅ Diret√≥rio de sa√≠da: $OUTPUT_DIR"
echo "üñºÔ∏è Formato de sa√≠da: $OUTPUT_FORMAT"
echo "üöÄ Iniciando processamento..."

# Prepara as op√ß√µes para o script plantuml2png.sh
SCRIPT_OPTS="--output-dir \"$OUTPUT_DIR\" --format $OUTPUT_FORMAT"

if [ $VERBOSE -eq 1 ]; then
  SCRIPT_OPTS="$SCRIPT_OPTS --verbose"
fi

if [ -n "$PLANTUML_JAR_PATH" ]; then
  SCRIPT_OPTS="$SCRIPT_OPTS --jar-path \"$PLANTUML_JAR_PATH\""
fi

# Processa cada arquivo
for diagram_file in $DIAGRAM_FILES; do
  CURRENT=$((CURRENT + 1))
  FILENAME=$(basename "$diagram_file")
  
  echo "[$CURRENT/$TOTAL_FILES] Processando $FILENAME..."
  
  # Executa a convers√£o
  eval "$PLANTUML_SCRIPT $SCRIPT_OPTS \"$diagram_file\""
  
  # Verifica o resultado
  if [ $? -eq 0 ]; then
    SUCCESS=$((SUCCESS + 1))
    echo "‚úÖ [$CURRENT/$TOTAL_FILES] $FILENAME convertido com sucesso"
  else
    FAILED=$((FAILED + 1))
    echo "‚ùå [$CURRENT/$TOTAL_FILES] Falha ao converter $FILENAME"
  fi
  
  echo "----------------------------------------"
done

# Mostra resumo
echo "üéØ Processamento conclu√≠do!"
echo "üìä Resumo:"
echo "   - Total de arquivos: $TOTAL_FILES"
echo "   - Convertidos com sucesso: $SUCCESS"
echo "   - Falhas: $FAILED"

if [ $SUCCESS -gt 0 ]; then
  echo "üìÇ Os arquivos $OUTPUT_FORMAT est√£o dispon√≠veis em: $OUTPUT_DIR"
fi

exit 0
